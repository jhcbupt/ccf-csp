/*
问题描述

　　目前在一个很大的平面房间里有 n 个无线路由器,每个无线路由器都固定在某个点上。任何两个无线路由器只要距离不超过 r 就能互相建立网络连接。
　　除此以外,另有 m 个可以摆放无线路由器的位置。你可以在这些位置中选择至多 k 个增设新的路由器。
　　你的目标是使得第 1 个路由器和第 2 个路由器之间的网络连接经过尽量少的中转路由器。请问在最优方案下中转路由器的最少个数是多少?
输入格式
　　第一行包含四个正整数 n,m,k,r。(2 ≤ n ≤ 100,1 ≤ k ≤ m ≤ 100, 1 ≤ r ≤ 108)。
　　接下来 n 行,每行包含两个整数 xi 和 yi,表示一个已经放置好的无线 路由器在 (xi, yi) 点处。输入数据保证第 1 和第 2 个路由器在仅有这 n 个路由器的情况下已经可以互相连接(经过一系列的中转路由器)。
　　接下来 m 行,每行包含两个整数 xi 和 yi,表示 (xi, yi) 点处可以增设 一个路由器。
　　输入中所有的坐标的绝对值不超过 108,保证输入中的坐标各不相同。
　　
输出格式
　　输出只有一个数,即在指定的位置中增设 k 个路由器后,从第 1 个路 由器到第 2 个路由器最少经过的中转路由器的个数。
　　
样例输入
5 3 1 3
0 0
5 5
0 3
0 5
3 5
3 3
4 4
3 0

样例输出
2
*/
#include<iostream>
#include<vector>
#include<queue>
#define MAX 200
//用BFS实现 
using namespace std;
class node{//节点类 ,xy是坐标，distance是路程，num是计数的，记录这是输入的第几个点，因为BFS的时候要判断终点是不是题目要求的那个 
public:
	int x, y, distance,num;
	node(int x1, int y1, int dis,int num){
		this->x = x1;
		this->y = y1;
		this->distance = dis;
		this->num = num;
	}
};

bool visit[MAX] = {false};//标志数组 

bool matrix[MAX][MAX] = {false};//邻接矩阵 

vector<node> v;//节点数组 

bool isconnect(node n1, node n2, int r){
	if((long long)(n1.x - n2.x)*(n1.x - n2.x) + (long long)(n1.y - n2.y)*(n1.y - n2.y) <= (long long)r*r)
	return true;
	else
	return false;
}

int main(){
	int n,m,k,r;
	cin>>n>>m>>k>>r;
	for(int i = 0; i < n + m; i++){//把节点都放进vector 
		int x,y;
		cin>>x>>y;
		v.push_back(node(x, y, 0, i));
	}
	for(int i = 0; i < n + m; i++){//填充邻接矩阵 
		for(int j = 0; j < n + m; j++){
			if(isconnect(v[i],v[j],r)){
				matrix[i][j] = true;
			}
		}
	}
	queue<node> q;//创建队列,把起点放进队列准备开始BFS 
	q.push(v[0]);
	visit[0] = true;
	(v[0]).distance = 0;
	while(!q.empty()){
		node u = q.front();
		q.pop();
		for(int j = 1; j < n + m; j++){//j=0是起点，就不算了，j从1开始遍历 
			if(matrix[u.num][j] && !visit[j]){//对i点能到达的所有j点，若j没被访问过 
				if(j == 1){//判断到终点了没 
				    cout<<u.distance<<endl;
				    return 0;
				}
				else{
					(v[j]).distance = u.distance + 1;
					visit[j] = true;
					q.push(v[j]);
				}
			}
		} 
	} 
	cin.get();
	return 0;
} 
/*这版代码还不完整，算是这道题的前导问题的解，即BFS找最短路径，由于测试数据不规范，目前的解就可以满分了，但实际上本题还要求了最多增设k个路由器，目前的代码没考虑这个问题。先分析一下
BFS找最短路的思路吧，这里node类的distance属性表示从起点到该点走了几步，所以所有点的distance初始化为0，每走一步，当前点的distance就等于上一个点的+1。
由于是BFS，搜完第一步能到的所有点才会开始搜第二步能到的点，所以当第一次到达终点时就一定是最短的路径。
BFS需要一个队列辅助，先把起点入队，然后开始循环，队首元素出队，它能到达且还没访问过的点入队，直到队列为空或到达终点*/
