/*
问题描述
　　给定n个整数，请统计出每个整数出现的次数，按出现次数从多到少的顺序输出。
输入格式
　　输入的第一行包含一个整数n，表示给定数字的个数。
　　第二行包含n个整数，相邻的整数之间用一个空格分隔，表示所给定的整数。
输出格式
　　输出多行，每行包含两个整数，分别表示一个给定的整数和它出现的次数。按出现次数递减的顺序输出。如果两个整数出现的次数一样多，则先输出值较小的，然后输出值较大的。
样例输入
12
5 2 3 3 1 3 4 2 5 2 3 5
样例输出
3 4
2 3
5 3
1 1
4 1
评测用例规模与约定
　　1 ≤ n ≤ 1000，给出的数都是不超过1000的非负整数。
*/
#include<iostream>
#include<map>
#include<algorithm>
#include<vector>

using namespace std;

bool cmp(const pair<int, int> &a, const pair<int, int> &b){
	if(a.second > b.second){
		return true;
	}
	else if(a.second < b.second){
		return false;
	}
	else{
		if(a.first < b.first){
			return true;
		}
		else{
			return false;
		}
	}
}

int main(){
	int n,a,i = 0;
	cin>>n;
	map<int, int> m;
	map<int, int>:: iterator p = m.begin(); 
	vector< pair<int, int> > v;
	vector< pair<int, int> >::iterator q = v.begin();
	
	for(int i = 1; i <= n; i++){
		cin>>a;
		m[a]++;
	}
	
	for(p = m.begin(); p != m.end(); p++){
		v.push_back(make_pair(p->first, p->second));
	}
	
	sort(v.begin(), v.end(), cmp);
	
	for(q = v.begin(); q != v.end(); q++){
		cout<<q->first<<" "<<q->second<<endl;
	}
	
	cin.get();
	return 0;
}
/*很容易想到这道题要用map，key存放数字，value存放次数。记得map是自动按key从小到大排序的，但题目的要求是按value从大到小输出，value一样时按key由小到大输出，那么就需要调整。
从网上查了把map按照value排序的方法，把map放进一个vector< pair<int, int> >里，自定义一个cmp函数比较pair的second值，再调用sort方法对vector排序
（sort可以调用自定义的函数排序，把自定义函数作为sort的第三个参数即可）。cmp返回true表示不调整，false表示对调比较的两个元素*/
